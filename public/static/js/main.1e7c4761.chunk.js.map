{"version":3,"sources":["setupFirebase.js","db.js","components/DisplayUser.js","components/TabList.js","components/Navigation.js","components/DirectionList.js","components/StopList.js","components/GroupList.js","components/BusList.js","components/AddBus.js","components/ArrivalDetail.js","components/ArrivalDetailList.js","components/ArrivalCard.js","components/Arrivals.js","components/Dashboard.js","components/Header.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","db","firestore","DisplayUser","signOut","e","preventDefault","props","auth","currentUser","displayName","photoURL","className","alt","src","onClick","this","React","Component","TabList","state","groups","handleGroupClick","console","log","target","dataset","id","uid","unsubscribe","collection","doc","onSnapshot","snapshot","setState","docs","map","group","selectedGroupId","key","data-id","data","name","admin","Navigation","isSignedIn","DirectionList","handleDirectionClick","stopGroups","stopGroup","i","Number","directionIndex","StopList","groupStops","handleStopClick","addStop","add","stopId","busRouteId","then","removeStop","stop","find","delete","setGroupStops","stopsArray","stopsForDirection","where","includes","GroupList","newGroupName","handleGroupChange","value","handleGroupBlur","addGroup","groupName","type","onChange","onBlur","BusList","handleBusNumberChange","busNumber","required","AddBus","componentDidMount","fetchRoutesForAgency","fetch","res","json","response","setRoutesForAgency","catch","error","fetchStopsForRoute","setStopsByBusRouteId","list","references","routesForAgency","stopsByBusRouteId","filterRoutesByShortName","routeForBusNumber","route","shortName","entry","stopGroupings","bind","groupId","index","stopIds","stops","filter","onSubmit","handleFormSubmit","method","groupList","ArrivalDetail","arrivalTime","arrival","scheduledArrivalTime","predictedArrivalTime","Math","max","minutesToArrival","now","floor","classNameList","classNames","predicted","push","join","routeShortName","ArrivalDetailList","arrivalsForBusRoutes","cellSpacing","ArrivalCard","arrivalsForStop","fetchArrivalsForStop","setArrivalsForStop","stopLabel","stopData","direction","busRouteIds","arrivalsAndDepartures","routeId","Date","length","Arrivals","componentDidUpdate","prevProps","prevState","getStops","get","busesByStop","_","groupBy","Object","keys","PureComponent","Dashboard","Header","Home","uiConfig","signInFlow","signInOptions","GoogleAuthProvider","PROVIDER_ID","tabId","unregisterAuthObserver","onAuthStateChanged","user","firebaseAuth","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1e7c4761.chunk.js","sourcesContent":["import firebase from 'firebase';\n// Required for side-effects\nimport 'firebase/firestore';\n\nfirebase.initializeApp({\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID\n});\n","import firebase from 'firebase';\n\nconst db = firebase.firestore();\n\nexport default db;","import React from 'react';\nimport firebase from 'firebase';\n\nexport default class DisplayUser extends React.Component {\n  signOut = (e) => {\n    e.preventDefault();\n    this.props.signOut();\n  }\n\n  render() {\n    const { displayName, photoURL } = firebase.auth().currentUser;\n    return (\n      <div className='display-user'>\n        <img alt=\"gravatar\" src={photoURL}></img>\n        <span className={'user-name'}>{displayName}</span>\n        <span className=\"clickable\" onClick={this.signOut}>\n          Sign Out\n        </span>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport db from '../db';\nimport firebase from 'firebase';\nimport DisplayUser from './DisplayUser';\n\nexport default class TabList extends React.Component {\n  state = {\n    groups: []\n  }\n  componentDidMount() {\n    const uid = firebase.auth().currentUser.uid;\n\n    this.unsubscribe = db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .onSnapshot(snapshot => {\n        this.setState({ groups: snapshot.docs });\n      });\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  handleGroupClick = (e) => {\n    console.log('group clicked')\n    this.props.handleGroupClick(e.target.dataset.id)\n  }\n\n  render() {\n    return (\n      <div className=\"tabs\">\n        { this.state.groups.map((group) => (\n          <div\n            className={this.props.selectedGroupId === group.id ? 'selected' : null}\n            onClick={this.handleGroupClick}\n            key={group.id}\n            data-id={group.id}>{group.data().name}</div>\n          ))\n        }\n        <div\n          className={this.props.admin ? 'selected' : null}\n          onClick={this.handleGroupClick}\n          key={'admin-tab'}\n          data-id={'admin'}>Admin</div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport TabList from './TabList';\n\nexport default class Navigation extends React.Component {\n  state = {\n    groups: []\n  }\n\n  render() {\n    return (\n      <div className={\"navigation\"}>\n        { this.props.isSignedIn\n          ? <TabList\n              admin={this.props.admin}\n              selectedGroupId={this.props.selectedGroupId}\n              handleGroupClick={this.props.handleGroupClick}\n            >\n            </TabList>\n          : null\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react';\n\nfunction DirectionList(props) {\n\n  const handleDirectionClick = (e) => {\n    props.handleDirectionClick(e.target.dataset.id)\n  }\n\n  return (\n    <div>\n      <p>Direction</p>\n      <ul>\n        { props.stopGroups.map((stopGroup, i) => (\n          <li\n            className={Number(props.directionIndex) === i ? 'selected' : null}\n            onClick={handleDirectionClick}\n            key={`direction-${i}`}\n            data-id={i}>{stopGroup.name.name}</li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n}\n\nexport default DirectionList;\n","import React from 'react';\nimport db from '../db';\nimport firebase from 'firebase';\n\nexport default class StopList extends React.Component {\n  state = {\n    groupStops: []\n  }\n\n  handleStopClick = (e) => {\n    this.addStop(e.target.dataset.id)\n  }\n\n  componentDidMount() {\n    const uid = firebase.auth().currentUser.uid;\n\n    this.unsubscribe = db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .doc(this.props.selectedGroupId)\n      .collection('stops')\n      .where('busRouteId', '==', this.props.busRouteId)\n      .onSnapshot(snapshot => {\n        this.setState({ groupStops: snapshot.docs },\n          () => this.setGroupStops());\n      });\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  addStop = (e) => {\n    console.log('crud')\n    const uid = firebase.auth().currentUser.uid;\n    const { selectedGroupId } = this.props;\n    db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .doc(selectedGroupId)\n      .collection('stops')\n      .add({\n        stopId: e.target.dataset.id,\n        busRouteId: this.props.busRouteId\n      }).then(() => {\n        console.log('stop added')\n      })\n  }\n\n  removeStop = (e) => {\n    console.log('remove stop')\n    const uid = firebase.auth().currentUser.uid;\n    const { selectedGroupId } = this.props;\n    const stop = this.state.groupStops.find(\n      stop => ( stop.data().stopId === e.target.dataset.id && stop.data().busRouteId === this.props.busRouteId) )\n    console.log(stop.id)\n    db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .doc(selectedGroupId)\n      .collection('stops')\n      .doc(stop.id)\n      .delete();\n  }\n\n  // TODO: delete\n  setGroupStops = () => {\n    console.log('setGroupStops')\n  }\n\n  stopsArray = () => {\n    const groupStops = this.state.groupStops.map(stop => ( stop.data().stopId ));\n    console.log(groupStops)\n    return this.props.stopsForDirection\n  }\n\n  render() {\n    const groupStops = this.state.groupStops.map(stop => ( stop.data().stopId ));\n\n    return (\n      <div>\n        <p>Stops</p>\n        <ul>\n          { this.props.stopsForDirection.map((stop, i) => (\n            <li\n              className={groupStops.includes(stop.id) ? 'selected' : null}\n              onClick={groupStops.includes(stop.id) ? this.removeStop : this.addStop}\n              key={`stop-${i}`}\n              data-id={stop.id}>{stop.name}</li>\n            ))\n          }\n        </ul>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport db from '../db';\nimport firebase from 'firebase';\n\nexport default class GroupList extends React.Component {\n  state = {\n    newGroupName: '',\n    groups: []\n  }\n\n  handleGroupChange = (e) => {\n    this.setState({\n      newGroupName: e.target.value\n    })\n  }\n\n  handleGroupClick = (e) => {\n    this.props.handleGroupClick(e.target.dataset.id);\n  }\n\n  handleGroupBlur = (e) => {\n    if (this.state.newGroupName === '') {\n      return\n    } else {\n      this.addGroup();\n    }\n  }\n\n  addGroup = (groupName) => {\n    const uid = firebase.auth().currentUser.uid;\n    db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .add({\n        name: this.state.newGroupName\n      }).then(() => {\n        this.setState({ newGroupName: '' })\n      })\n  }\n\n  componentDidMount() {\n    const uid = firebase.auth().currentUser.uid;\n\n    this.unsubscribe = db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .onSnapshot(snapshot => {\n        this.setState({ groups: snapshot.docs });\n      });\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Group</p>\n        <ul>\n          { this.state.groups.map((group) => (\n            <li\n              className={this.props.selectedGroupId === group.id ? 'selected' : null}\n              onClick={this.handleGroupClick}\n              key={group.id}\n              data-id={group.id}>{group.data().name}</li>\n            ))\n          }\n        </ul>\n        <input\n          type={'text'}\n          id={'group-name'}\n          name={'group-name'}\n          onChange={this.handleGroupChange}\n          onBlur={this.handleGroupBlur}\n        >\n        </input>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport db from '../db';\nimport firebase from 'firebase';\n\nexport default class BusList extends React.Component {\n  handleBusNumberChange = (e) => {\n    this.props.handleBusNumberChange(e.target.value);\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Bus</p>\n        <input\n          type={'text'}\n          id={'bus-number'}\n          name={'bus-number'}\n          value={this.props.busNumber}\n          required={true}\n          onChange={this.handleBusNumberChange}\n        >\n        </input>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport firebase from 'firebase';\nimport db from '../db';\nimport DirectionList from './DirectionList';\nimport StopList from './StopList';\nimport GroupList from './GroupList';\nimport BusList from './BusList';\n\nexport default class AddBus extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      busNumber: '',\n      busRouteId: '',\n      routesForAgency: [],\n      stopsByBusRouteId: {},\n      directionIndex: -1,\n      selectedGroupId: ''\n    }\n    this.handleBusNumberChange = this.handleBusNumberChange.bind(this);\n    this.fetchRoutesForAgency = this.fetchRoutesForAgency.bind(this);\n    this.fetchStopsForRoute = this.fetchStopsForRoute.bind(this);\n    this.handleDirectionClick = this.handleDirectionClick.bind(this);\n    this.handleGroupClick = this.handleGroupClick.bind(this);\n  }\n\n  componentDidMount = () => {\n    this.fetchRoutesForAgency();\n  }\n\n  fetchRoutesForAgency = function () {\n    fetch('/api/v1/routes')\n      .then(res => res.json())\n      .then((response) => { this.setRoutesForAgency(response.data) })\n      .catch((error) => { console.log(\"Error while fetching test datas\", error); })\n  }\n\n  fetchStopsForRoute = () => {\n    console.log('fetch stops', this.state.busRouteId)\n    fetch(`/api/v1/routes/${this.state.busRouteId}/stops`)\n      .then(res => res.json())\n      .then((response) => { console.log(response);\n                            this.setStopsByBusRouteId(response.data); })\n      .catch((error) => { console.log(\"Error while fetching test datas\", error); })\n  }\n\n  setRoutesForAgency = (data) => {\n    const { list, references } = data;\n    console.log(list, references);\n    this.setState({\n      routesForAgency: list\n    });\n  }\n\n  setStopsByBusRouteId = (data) => {\n    const { busRouteId } = this.state\n    console.log(data)\n    this.setState({\n      stopsByBusRouteId: {\n        [busRouteId]: data,\n        ...this.state.stopsByBusRouteId\n      }\n    })\n  }\n\n  handleFormSubmit(e) {\n    e.preventDefault();\n  }\n\n  handleBusNumberChange(busNumber) {\n    this.setState({\n      directionIndex: -1,\n      busNumber: busNumber\n    }, () => this.filterRoutesByShortName())\n  }\n\n  handleGroupClick(groupId) {\n    this.setState({\n      selectedGroupId: groupId,\n      busNumber: '',\n      busRouteId: '',\n      directionIndex: -1\n    })\n  }\n\n  handleDirectionClick(index) {\n    console.log('direction', index)\n    this.setState({\n      directionIndex: index\n    })\n  }\n\n  stopsForDirection() {\n    const stopGroups = this.stopGroups();\n    const { directionIndex } = this.state;\n    if (directionIndex >= 0) {\n      const stopIds = stopGroups[directionIndex].stopIds;\n      // console.log(stopIds)\n      const { busRouteId, stopsByBusRouteId } = this.state;\n      const { references } = stopsByBusRouteId[busRouteId] || [];\n      return references.stops.filter(stop => stopIds.includes(stop.id));\n    }\n  }\n\n  filterRoutesByShortName = () => {\n    const routeForBusNumber = this.state.routesForAgency.find(route => route.shortName == this.state.busNumber);\n    console.log(routeForBusNumber)\n    if (routeForBusNumber) {\n      this.setState({\n        busRouteId: routeForBusNumber.id\n      }, () => { this.fetchStopsForRoute() });\n    } else {\n      this.setState({\n        busRouteId: \"\"\n      })\n    }\n  }\n\n  stopGroups = () => {\n    const { busRouteId, stopsByBusRouteId } = this.state;\n    const { entry } = stopsByBusRouteId[busRouteId] || [];\n    if (entry) {\n      return entry.stopGroupings[0].stopGroups;\n    }\n  }\n\n  render() {\n    const stopGroups = this.stopGroups();\n    const stopsForDirection = this.stopsForDirection();\n\n    return (\n      <form\n        className={'add-bus-form'}\n        onSubmit={this.handleFormSubmit}\n        method={'post'}>\n          <GroupList\n            groupList={this.state.groups}\n            handleGroupClick={this.handleGroupClick}\n            selectedGroupId={this.state.selectedGroupId}\n          >\n          </GroupList>\n\n          { this.state.selectedGroupId !== ''\n            ? <BusList\n                busNumber={this.state.busNumber}\n                handleBusNumberChange={this.handleBusNumberChange}>\n              </BusList>\n            : this.state.selectedGroupId\n          }\n\n          { stopGroups\n            ? <DirectionList\n                stopGroups={stopGroups}\n                handleDirectionClick={this.handleDirectionClick}\n                directionIndex={this.state.directionIndex}\n              >\n              </DirectionList>\n            : null\n          }\n\n          { stopsForDirection\n            ? <StopList\n                busRouteId={this.state.busRouteId}\n                selectedGroupId={this.state.selectedGroupId}\n                stopsForDirection={stopsForDirection}\n              >\n              </StopList>\n            : null\n          }\n      </form>\n    )\n  }\n}\n","import React from 'react';\n\nexport default class ArrivalDetail extends React.Component {\n\n  arrivalTime = () => {\n    const { scheduledArrivalTime, predictedArrivalTime } = this.props.arrival\n    return Math.max(scheduledArrivalTime, predictedArrivalTime)\n  }\n\n  minutesToArrival = () => {\n    const { now } = this.props\n    const arrivalTime = this.arrivalTime();\n    return Math.floor((arrivalTime - now) / 60000);\n  }\n\n  classNameList = () => {\n    const minutesToArrival = this.minutesToArrival();\n    const classNames = []\n    if (!this.props.arrival.predicted) {\n      classNames.push('scheduled')\n    }\n    if (minutesToArrival < 1) {\n      classNames.push('past')\n    } else if (minutesToArrival < 6) {\n      classNames.push('warning');\n    } else if (minutesToArrival < 11) {\n      classNames.push('soon');\n    }\n    return classNames.join(' ')\n  }\n\n  render() {\n    const { arrival } = this.props\n    const minutesToArrival = this.minutesToArrival()\n    const classNameList = this.classNameList()\n    return (\n      <tr className={classNameList}>\n        <td>{arrival.routeShortName}</td>\n        <td className={'time-column'}>{`${minutesToArrival} min`}</td>\n      </tr>\n    )}\n}\n","import React from 'react';\nimport ArrivalDetail from './ArrivalDetail';\n\nexport default class ArrivalDetailList extends React.Component {\n  render() {\n    const { arrivalsForBusRoutes } = this.props\n\n    return (\n      <table\n        className={'arrivals'}\n        cellSpacing={0}>\n        <tbody>\n          { this.props.arrivalsForBusRoutes.map((arrival, i) => (\n            <ArrivalDetail\n              arrival={arrival}\n              now={this.props.now}\n            >\n            </ArrivalDetail>\n            ))\n          }\n        </tbody>\n      </table>\n    )}\n}\n","import React from 'react';\nimport ArrivalDetailList from './ArrivalDetailList';\n\nexport default class ArrivalCard extends React.Component {\n  state = {\n    arrivalsForStop: []\n  }\n\n  componentDidMount = () => {\n    this.fetchArrivalsForStop();\n  }\n\n  fetchArrivalsForStop = function () {\n    fetch(`/api/v1/stops/${this.props.stopId}/arrivals`)\n      .then(res => res.json())\n      .then((response) => { this.setArrivalsForStop(response.data) })\n      .catch((error) => { console.log(\"Error while fetching test datas\", error); })\n  }\n\n  setArrivalsForStop = (data) => {\n    console.log(data)\n    this.setState({\n      arrivalsForStop: data\n    });\n  }\n\n  stopLabel = () => {\n    const { references } = this.state.arrivalsForStop\n    if (!references) {\n      return `retrieving information for stop ${this.props.stopId}...`\n    }\n    const { stops } = references\n    const stopData = stops.find(stop => stop.id === this.props.stopId);\n    return `${stopData.name} - ${stopData.direction}`;\n  }\n\n  busRouteIds = () => {\n    const busRouteIds = this.props.busRouteIds.map(busRouteId => ( busRouteId.data().busRouteId))\n    return busRouteIds\n  }\n\n  arrivalsForBusRoutes = () => {\n    const { entry } = this.state.arrivalsForStop\n    if (!entry) {\n      return []\n    }\n    const { arrivalsAndDepartures } = entry\n    const busRouteIds = this.busRouteIds();\n    const arrivals = arrivalsAndDepartures.filter(arrival => busRouteIds.includes(arrival.routeId))\n    return arrivals\n  }\n\n  render() {\n    const stopLabel = this.stopLabel();\n    const arrivalsForBusRoutes = this.arrivalsForBusRoutes();\n    const now = Date.now();\n\n    return (\n      <div className={'arrival-card'}>\n        <h2>{stopLabel}</h2>\n        { arrivalsForBusRoutes && arrivalsForBusRoutes.length > 0\n          ? <ArrivalDetailList\n              arrivalsForBusRoutes={arrivalsForBusRoutes}\n              now={now}\n            >\n            </ArrivalDetailList>\n          : <p>no arrival details found</p>\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport db from '../db';\nimport firebase from 'firebase';\nimport _ from 'lodash';\nimport ArrivalCard from './ArrivalCard';\n\nexport default class Arrivals extends React.PureComponent {\n  state = {\n    stops: []\n  }\n\n  componentDidMount() {\n    this.getStops();\n  }\n\n  componentDidUpdate = (prevProps, prevState) => {\n    if (prevProps.selectedGroupId !== this.props.selectedGroupId) {\n      this.getStops();\n    }\n  }\n\n  getStops = () => {\n    const uid = firebase.auth().currentUser.uid;\n    console.log(uid, this.props.selectedGroupId)\n\n    db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .doc(this.props.selectedGroupId)\n      .collection('stops')\n      .get()\n      .then(doc => {\n        this.setState({ stops: doc.docs})\n      })\n  }\n\n  busesByStop = () => {\n    return _.groupBy(this.state.stops, (stop) => ( stop.data().stopId ))\n  }\n\n  render() {\n    const busesByStop = this.busesByStop();\n    console.log(busesByStop);\n    return (\n      <div className=\"arrivals\">\n        { Object.keys(busesByStop).map((stopId, i) => (\n          <ArrivalCard\n            key={`${stopId}-${i}`}\n            stopId={stopId}\n            busRouteIds={busesByStop[stopId]}\n          >\n          </ArrivalCard>\n        ))}\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport AddBus from './AddBus';\nimport Arrivals from './Arrivals';\n\nexport default class Dashboard extends React.Component {\n  render() {\n    return (\n      <div>\n        { this.props.admin\n          ? <AddBus></AddBus>\n          : null\n        }\n        { this.props.selectedGroupId !== ''\n          ? <Arrivals\n              selectedGroupId={this.props.selectedGroupId}\n            >\n            </Arrivals>\n          : null\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport DisplayUser from './DisplayUser';\n\nexport default class Header extends React.Component {\n  state = {\n    groups: []\n  }\n\n  render() {\n    return (\n      <div className={\"header\"}>\n        <div className={\"title\"}>Bus Arrivals</div>\n        <div className={'banner'}>\n          BLACK LIVES MATTER\n        </div>\n        { this.props.isSignedIn\n          ? <DisplayUser\n              isSignedIn={this.props.isSignedIn}\n              signOut={this.props.signOut} />\n          : <div\n              className={'display-user'}\n            >\n              signed out\n            </div>\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from 'firebase';\nimport Navigation from './Navigation';\nimport Dashboard from './Dashboard';\nimport Header from './Header';\n\nexport default class Home extends React.Component {\n  state = {\n    isSignedIn: false,\n    selectedGroupId: '',\n    admin: false\n  }\n\n  uiConfig = {\n    signInFlow: 'popup',\n    signInOptions: [\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID\n    ],\n  }\n\n  componentDidMount() {\n      this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(\n        user => {\n          this.setState({ isSignedIn: !!user });\n        }\n      );\n    }\n\n    componentWillUnmount() {\n      if (this.unregisterAuthObserver) {\n        this.unregisterAuthObserver();\n      }\n    }\n\n  signOut = () => {\n    firebase.auth().signOut();\n  }\n\n  handleGroupClick = (tabId) => {\n    console.log(tabId)\n    if (tabId === 'admin') {\n      this.setState({\n        admin: true,\n        selectedGroupId: ''\n      })\n    } else {\n      this.setState({\n        admin: false,\n        selectedGroupId: tabId\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header\n          isSignedIn={this.state.isSignedIn}\n          signOut={this.signOut}\n        >\n        </Header>\n        <Navigation\n          isSignedIn={this.state.isSignedIn}\n          signOut={this.signOut}\n          handleGroupClick={this.handleGroupClick}\n          admin={this.state.admin}\n          selectedGroupId={this.state.selectedGroupId}>\n        </Navigation>\n        { this.state.isSignedIn\n          ? <Dashboard\n              admin={this.state.admin}\n              selectedGroupId={this.state.selectedGroupId}\n            >\n            </Dashboard>\n          : <StyledFirebaseAuth\n              uiConfig={this.uiConfig}\n              firebaseAuth={firebase.auth()}\n            >\n            </StyledFirebaseAuth>\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './components/Home';\n\nimport './styles/App.css';\nimport './styles/dashboard.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './setupFirebase';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}