{"version":3,"sources":["setupFirebase.js","db.js","components/TabList.js","components/Navigation.js","components/DirectionList.js","components/StopList.js","components/GroupList.js","components/GroupPreviewCard.js","components/GroupPreviewList.js","components/BusInput.js","components/AddBus.js","components/ArrivalDetail.js","components/ArrivalDetailList.js","components/ArrivalCard.js","components/Arrivals.js","components/Dashboard.js","components/DisplayUser.js","components/Header.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","db","firestore","TabList","state","groups","handleGroupClick","e","props","target","dataset","id","uid","auth","currentUser","this","unsubscribe","collection","doc","onSnapshot","snapshot","setState","docs","className","map","group","selectedGroupId","onClick","key","data-id","data","name","admin","React","Component","Navigation","isSignedIn","DirectionList","handleDirectionClick","stopGroups","stopGroup","i","Number","directionIndex","StopList","groupStops","handleStopClick","addStop","add","stopId","busRouteId","removeStop","stop","find","delete","where","stopsForDirection","includes","GroupList","newGroupName","handleGroupChange","value","handleGroupBlur","addGroup","groupName","then","removeGroup","type","onChange","onBlur","GroupPreviewCard","arrivalsForStop","componentDidMount","fetchArrivalsForStop","fetch","res","json","response","setArrivalsForStop","catch","error","console","log","stopLabel","references","stopData","stops","direction","busRouteIds","busRouteShortName","routesForAgency","route","shortName","handleDeleteClick","GroupPreviewList","getStops","busesByStop","_","groupBy","Object","keys","PureComponent","BusInput","handleBusNumberChange","busNumber","required","AddBus","fetchRoutesForAgency","setRoutesForAgency","fetchStopsForRoute","setStopsByBusRouteId","list","stopsByBusRouteId","filterRoutesByShortName","routeForBusNumber","entry","stopGroupings","bind","preventDefault","groupId","index","stopIds","filter","onSubmit","handleFormSubmit","method","ArrivalDetail","arrivalTime","arrival","scheduledArrivalTime","predictedArrivalTime","Math","max","minutesToArrival","now","floor","classNameList","classNames","predicted","push","join","routeShortName","ArrivalDetailList","cellSpacing","arrivalsForBusRoutes","ArrivalCard","arrivalSubscription","setInterval","arrivalsAndDepartures","routeId","clearInterval","Date","length","Arrivals","componentDidUpdate","prevProps","prevState","get","Dashboard","DisplayUser","signOut","displayName","photoURL","alt","src","Header","Home","uiConfig","signInFlow","signInOptions","GoogleAuthProvider","PROVIDER_ID","tabId","unregisterAuthObserver","onAuthStateChanged","user","firebaseAuth","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.aa940c31.chunk.js","sourcesContent":["import firebase from 'firebase';\n// Required for side-effects\nimport 'firebase/firestore';\n\nfirebase.initializeApp({\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID\n});\n","import firebase from 'firebase';\n\nconst db = firebase.firestore();\n\nexport default db;","import React from 'react';\nimport db from '../db';\nimport firebase from 'firebase';\nimport PropTypes from 'prop-types';\n\nexport default class TabList extends React.Component {\n  state = {\n    groups: []\n  }\n  componentDidMount() {\n    const uid = firebase.auth().currentUser.uid;\n\n    this.unsubscribe = db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .onSnapshot(snapshot => {\n        this.setState({ groups: snapshot.docs });\n      });\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  handleGroupClick = (e) => {\n    this.props.handleGroupClick(e.target.dataset.id)\n  }\n\n  render() {\n    return (\n      <div className=\"tabs\">\n        { this.state.groups.map((group) => (\n          <div\n            className={this.props.selectedGroupId === group.id ? 'selected' : null}\n            onClick={this.handleGroupClick}\n            key={group.id}\n            data-id={group.id}>{group.data().name}</div>\n          ))\n        }\n        <div\n          className={this.props.admin ? 'selected' : null}\n          onClick={this.handleGroupClick}\n          key={'admin-tab'}\n          data-id={'admin'}>Admin</div>\n      </div>\n    )\n  }\n}\n\nTabList.propTypes = {\n  admin: PropTypes.bool.isRequired,\n  selectedGroupId: PropTypes.string.isRequired,\n  handleGroupClick: PropTypes.func.isRequired,\n}\n","import React from 'react';\nimport TabList from './TabList';\nimport PropTypes from 'prop-types';\n\nexport default class Navigation extends React.Component {\n  state = {\n    groups: []\n  }\n\n  render() {\n    return (\n      <div className={\"navigation\"}>\n        { this.props.isSignedIn\n          ? <TabList\n              admin={this.props.admin}\n              selectedGroupId={this.props.selectedGroupId}\n              handleGroupClick={this.props.handleGroupClick}\n            >\n            </TabList>\n          : null\n        }\n      </div>\n    )\n  }\n}\n\nNavigation.propTypes = {\n  isSignedIn: PropTypes.bool.isRequired,\n  signOut: PropTypes.func.isRequired,\n  handleGroupClick: PropTypes.func.isRequired,\n  admin: PropTypes.bool.isRequired,\n  selectedGroupId: PropTypes.string.isRequired,\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction DirectionList(props) {\n\n  const handleDirectionClick = (e) => {\n    props.handleDirectionClick(e.target.dataset.id)\n  }\n\n  return (\n    <div>\n      <p>Direction</p>\n      <ul>\n        { props.stopGroups.map((stopGroup, i) => (\n          <li\n            className={Number(props.directionIndex) === i ? 'selected' : null}\n            onClick={handleDirectionClick}\n            key={`direction-${i}`}\n            data-id={i}>{stopGroup.name.name}</li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n}\n\nexport default DirectionList;\n\nDirectionList.propTypes = {\n  stopGroups: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handleDirectionClick: PropTypes.func.isRequired,\n  directionIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n}\n","import React from 'react';\nimport db from '../db';\nimport firebase from 'firebase';\nimport PropTypes from 'prop-types';\n\nexport default class StopList extends React.Component {\n  state = {\n    groupStops: []\n  }\n\n  handleStopClick = (e) => {\n    this.addStop(e.target.dataset.id)\n  }\n\n  componentDidMount() {\n    const uid = firebase.auth().currentUser.uid;\n\n    this.unsubscribe = db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .doc(this.props.selectedGroupId)\n      .collection('stops')\n      .where('busRouteId', '==', this.props.busRouteId)\n      .onSnapshot(snapshot => {\n        this.setState({ groupStops: snapshot.docs });\n      });\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  addStop = (e) => {\n    const uid = firebase.auth().currentUser.uid;\n    const { selectedGroupId } = this.props;\n    db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .doc(selectedGroupId)\n      .collection('stops')\n      .add({\n        stopId: e.target.dataset.id,\n        busRouteId: this.props.busRouteId\n      })\n  }\n\n  removeStop = (e) => {\n    const uid = firebase.auth().currentUser.uid;\n    const { selectedGroupId } = this.props;\n    const stop = this.state.groupStops.find(\n      stop => ( stop.data().stopId === e.target.dataset.id && stop.data().busRouteId === this.props.busRouteId) )\n    db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .doc(selectedGroupId)\n      .collection('stops')\n      .doc(stop.id)\n      .delete();\n  }\n\n  render() {\n    const groupStops = this.state.groupStops.map(stop => ( stop.data().stopId ));\n\n    return (\n      <div>\n        <p>Stops</p>\n        <ul>\n          { this.props.stopsForDirection.map((stop, i) => (\n            <li\n              className={groupStops.includes(stop.id) ? 'selected' : null}\n              onClick={groupStops.includes(stop.id) ? this.removeStop : this.addStop}\n              key={`stop-${i}`}\n              data-id={stop.id}>{stop.name}</li>\n            ))\n          }\n        </ul>\n      </div>\n    );\n  }\n}\n\nStopList.propTypes = {\n  busRouteId: PropTypes.string.isRequired,\n  selectedGroupId: PropTypes.string.isRequired,\n  stopsForDirection: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n","import React from 'react';\nimport db from '../db';\nimport firebase from 'firebase';\nimport PropTypes from 'prop-types';\n\nexport default class GroupList extends React.Component {\n  state = {\n    newGroupName: '',\n    groups: []\n  }\n\n  handleGroupChange = (e) => {\n    this.setState({\n      newGroupName: e.target.value\n    })\n  }\n\n  handleGroupClick = (e) => {\n    this.props.handleGroupClick(e.target.dataset.id);\n  }\n\n  handleGroupBlur = (e) => {\n    if (this.state.newGroupName === '') {\n      return\n    } else {\n      this.addGroup();\n    }\n  }\n\n  addGroup = (groupName) => {\n    const uid = firebase.auth().currentUser.uid;\n    db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .add({\n        name: this.state.newGroupName\n      }).then(() => {\n        this.setState({ newGroupName: '' })\n      })\n  }\n\n  removeGroup = (e) => {\n    const uid = firebase.auth().currentUser.uid;\n    db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .doc(e.target.dataset.id)\n      .delete();\n  }\n\n  componentDidMount() {\n    const uid = firebase.auth().currentUser.uid;\n\n    this.unsubscribe = db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .onSnapshot(snapshot => {\n        this.setState({ groups: snapshot.docs });\n      });\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Group</p>\n        <ul>\n          { this.state.groups.map((group) => (\n            <li\n              className={this.props.selectedGroupId === group.id ? 'selected' : null}\n              onClick={this.handleGroupClick}\n              key={group.id}\n              data-id={group.id}>\n                {group.data().name}\n                &nbsp;\n                <span\n                  className={'clickable delete-link'}\n                  data-id={group.id}\n                  onClick={this.removeGroup}\n                >\n                  delete\n                </span>\n            </li>\n            ))\n          }\n        </ul>\n        <input\n          type={'text'}\n          id={'group-name'}\n          name={'group-name'}\n          onChange={this.handleGroupChange}\n          onBlur={this.handleGroupBlur}\n        >\n        </input>\n      </div>\n    );\n  }\n}\n\n\nGroupList.propTypes = {\n  handleGroupClick: PropTypes.func.isRequired,\n  selectedGroupId: PropTypes.string.isRequired,\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class GroupPreviewCard extends React.Component {\n  state = {\n    arrivalsForStop: [],\n    groupStops: []\n  }\n\n  componentDidMount = () => {\n    this.fetchArrivalsForStop();\n  }\n\n  fetchArrivalsForStop = function () {\n    const { stopId } = this.props;\n\n    fetch(`/api/v1/stops/${stopId}/arrivals`)\n      .then(res => res.json())\n      .then((response) => { this.setArrivalsForStop(response.data) })\n      .catch((error) => { console.log(\"Error while fetching test datas\", error); })\n  }\n\n  setArrivalsForStop = (data) => {\n    this.setState({\n      arrivalsForStop: data\n    });\n  }\n\n  stopLabel = () => {\n    const { references } = this.state.arrivalsForStop\n    if (!references) {\n      return `retrieving information for stop ${this.props.stopId}...`\n    }\n    const { stops } = references\n    const stopData = stops.find(stop => stop.id === this.props.stopId);\n    return `${stopData.name} - ${stopData.direction}`;\n  }\n\n  busRouteIds = () => {\n    const busRouteIds = this.props.busRouteIds.map(busRouteId => ( busRouteId.data().busRouteId))\n    return busRouteIds\n  }\n\n  busRouteShortName = (busRouteId) => {\n    const { routesForAgency } = this.props;\n    if (!routesForAgency) {\n      return\n    }\n    const route = routesForAgency.find(route => busRouteId === route.id)\n    const shortName = route ? route.shortName : 'not found'\n    return shortName\n  }\n\n  handleDeleteClick = (e) => {\n    this.props.handleDeleteClick(e.target.dataset.id)\n  }\n\n  render() {\n    const stopLabel = this.stopLabel();\n\n    return (\n      <div className={'group-preview-card'}>\n        <h2>{stopLabel}</h2>\n        { this.props.busRouteIds.map(busRouteId => (\n          <p key={busRouteId.id}>\n            {this.busRouteShortName(busRouteId.data().busRouteId)}\n            &nbsp;\n            <span\n              className={'clickable delete-link'}\n              data-id={busRouteId.id}\n              onClick={this.handleDeleteClick}\n            >\n              &nbsp;\n              delete\n            </span>\n          </p>\n        ))}\n      </div>\n    )\n  }\n}\n\nGroupPreviewCard.propTypes = {\n  stopId: PropTypes.string.isRequired,\n  busRouteIds: PropTypes.arrayOf(PropTypes.object).isRequired,\n  routesForAgency: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handleDeleteClick: PropTypes.func.isRequired,\n}\n","import React from 'react';\nimport db from '../db';\nimport firebase from 'firebase';\nimport _ from 'lodash';\nimport GroupPreviewCard from './GroupPreviewCard';\nimport PropTypes from 'prop-types';\n\nexport default class GroupPreviewList extends React.PureComponent {\n  state = {\n    stops: []\n  }\n\n  componentDidMount() {\n    this.getStops();\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  getStops = () => {\n    const uid = firebase.auth().currentUser.uid;\n    if (!this.props.selectedGroupId) {\n      return\n    }\n    this.unsubscribe = db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .doc(this.props.selectedGroupId)\n      .collection('stops')\n      .onSnapshot(snapshot => {\n        this.setState({ stops: snapshot.docs });\n      });\n  }\n\n  removeStop = (stopId) => {\n    const uid = firebase.auth().currentUser.uid;\n    const { selectedGroupId } = this.props;\n    db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .doc(selectedGroupId)\n      .collection('stops')\n      .doc(stopId)\n      .delete();\n  }\n\n  busesByStop = () => {\n    return _.groupBy(this.state.stops, (stop) => ( stop.data().stopId ))\n  }\n\n  render() {\n    const busesByStop = this.busesByStop();\n\n    return (\n      <div className=\"group-preview\">\n        { Object.keys(busesByStop).map((stopId) => (\n          <GroupPreviewCard\n            key={stopId}\n            stopId={stopId}\n            busRouteIds={busesByStop[stopId]}\n            routesForAgency={this.props.routesForAgency}\n            handleDeleteClick={this.removeStop}\n          >\n          </GroupPreviewCard>\n        ))}\n      </div>\n    )\n  }\n}\n\nGroupPreviewList.propTypes = {\n  selectedGroupId: PropTypes.string.isRequired,\n  routesForAgency: PropTypes.arrayOf(PropTypes.object).isRequired\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class BusInput extends React.Component {\n  handleBusNumberChange = (e) => {\n    this.props.handleBusNumberChange(e.target.value);\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Bus</p>\n        <input\n          type={'text'}\n          id={'bus-number'}\n          name={'bus-number'}\n          value={this.props.busNumber}\n          required={true}\n          onChange={this.handleBusNumberChange}\n        >\n        </input>\n      </div>\n    )\n  }\n}\n\nBusInput.propTypes = {\n  busNumber: PropTypes.string.isRequired,\n  handleBusNumberChange: PropTypes.func.isRequired,\n}\n","import React from 'react';\nimport DirectionList from './DirectionList';\nimport StopList from './StopList';\nimport GroupList from './GroupList';\nimport GroupPreviewList from './GroupPreviewList';\nimport BusInput from './BusInput';\n\nexport default class AddBus extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      busNumber: '',\n      busRouteId: '',\n      routesForAgency: [],\n      stopsByBusRouteId: {},\n      directionIndex: -1,\n      selectedGroupId: ''\n    }\n    this.handleBusNumberChange = this.handleBusNumberChange.bind(this);\n    this.fetchRoutesForAgency = this.fetchRoutesForAgency.bind(this);\n    this.fetchStopsForRoute = this.fetchStopsForRoute.bind(this);\n    this.handleDirectionClick = this.handleDirectionClick.bind(this);\n    this.handleGroupClick = this.handleGroupClick.bind(this);\n  }\n\n  componentDidMount = () => {\n    this.fetchRoutesForAgency();\n  }\n\n  fetchRoutesForAgency = function () {\n    fetch('/api/v1/routes')\n      .then(res => res.json())\n      .then((response) => { this.setRoutesForAgency(response.data) })\n      .catch((error) => { console.log(\"Error fetching routes for agency\", error); });\n  }\n\n  fetchStopsForRoute = () => {\n    fetch(`/api/v1/routes/${this.state.busRouteId}/stops`)\n      .then(res => res.json())\n      .then((response) => { this.setStopsByBusRouteId(response.data); })\n      .catch((error) => { console.log(\"Error fetching stops for route\", error); });\n  }\n\n  setRoutesForAgency = (data) => {\n    const { list } = data;\n    this.setState({\n      routesForAgency: list\n    });\n  }\n\n  setStopsByBusRouteId = (data) => {\n    const { busRouteId } = this.state;\n    this.setState({\n      stopsByBusRouteId: {\n        [busRouteId]: data,\n        ...this.state.stopsByBusRouteId\n      }\n    });\n  }\n\n  handleFormSubmit(e) {\n    e.preventDefault();\n  }\n\n  handleBusNumberChange(busNumber) {\n    this.setState({\n      directionIndex: -1,\n      busNumber: busNumber\n    }, () => this.filterRoutesByShortName());\n  }\n\n  handleGroupClick(groupId) {\n    this.setState({\n      selectedGroupId: groupId,\n      busNumber: '',\n      busRouteId: '',\n      directionIndex: -1\n    });\n  }\n\n  handleDirectionClick(index) {\n    this.setState({\n      directionIndex: index\n    });\n  }\n\n  stopsForDirection() {\n    const stopGroups = this.stopGroups();\n    const { directionIndex } = this.state;\n    if (directionIndex >= 0) {\n      const stopIds = stopGroups[directionIndex].stopIds;\n      const { busRouteId, stopsByBusRouteId } = this.state;\n      const { references } = stopsByBusRouteId[busRouteId] || [];\n      return references.stops.filter(stop => stopIds.includes(stop.id));\n    }\n  }\n\n  filterRoutesByShortName = () => {\n    const routeForBusNumber = this.state.routesForAgency.find(route => route.shortName === this.state.busNumber);\n    if (routeForBusNumber) {\n      this.setState({\n        busRouteId: routeForBusNumber.id\n      }, () => { this.fetchStopsForRoute() });\n    } else {\n      this.setState({\n        busRouteId: \"\"\n      });\n    }\n  }\n\n  stopGroups = () => {\n    const { busRouteId, stopsByBusRouteId } = this.state;\n    const { entry } = stopsByBusRouteId[busRouteId] || [];\n    if (entry) {\n      return entry.stopGroupings[0].stopGroups;\n    }\n  }\n\n  render() {\n    const stopGroups = this.stopGroups();\n    const stopsForDirection = this.stopsForDirection();\n\n    return (\n      <div className={'admin'}>\n        <form\n          className={'add-bus-form'}\n          onSubmit={this.handleFormSubmit}\n          method={'post'}>\n            <GroupList\n              handleGroupClick={this.handleGroupClick}\n              selectedGroupId={this.state.selectedGroupId}\n            >\n            </GroupList>\n\n            { this.state.selectedGroupId !== ''\n              ? <BusInput\n                  busNumber={this.state.busNumber}\n                  handleBusNumberChange={this.handleBusNumberChange}>\n                </BusInput>\n              : this.state.selectedGroupId\n            }\n\n            { stopGroups\n              ? <DirectionList\n                  stopGroups={stopGroups}\n                  handleDirectionClick={this.handleDirectionClick}\n                  directionIndex={this.state.directionIndex}\n                >\n                </DirectionList>\n              : null\n            }\n\n            { stopsForDirection\n              ? <StopList\n                  busRouteId={this.state.busRouteId}\n                  selectedGroupId={this.state.selectedGroupId}\n                  stopsForDirection={stopsForDirection}\n                >\n                </StopList>\n              : null\n            }\n        </form>\n        { this.state.selectedGroupId !== ''\n          ? <GroupPreviewList\n              selectedGroupId={this.state.selectedGroupId}\n              routesForAgency={this.state.routesForAgency}>\n            </GroupPreviewList>\n          : null\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class ArrivalDetail extends React.Component {\n\n  arrivalTime = () => {\n    const { scheduledArrivalTime, predictedArrivalTime } = this.props.arrival\n    return Math.max(scheduledArrivalTime, predictedArrivalTime)\n  }\n\n  minutesToArrival = () => {\n    const { now } = this.props\n    const arrivalTime = this.arrivalTime();\n    return Math.floor((arrivalTime - now) / 60000);\n  }\n\n  classNameList = () => {\n    const minutesToArrival = this.minutesToArrival();\n    const classNames = []\n    if (!this.props.arrival.predicted) {\n      classNames.push('scheduled')\n    }\n    if (minutesToArrival < 1) {\n      classNames.push('past')\n    } else if (minutesToArrival < 6) {\n      classNames.push('warning');\n    } else if (minutesToArrival < 11) {\n      classNames.push('soon');\n    }\n    return classNames.join(' ')\n  }\n\n  render() {\n    const { arrival } = this.props\n    const minutesToArrival = this.minutesToArrival()\n    const classNameList = this.classNameList()\n    return (\n      <tr className={classNameList}>\n        <td>{arrival.routeShortName}</td>\n        <td className={'time-column'}>{`${minutesToArrival} min`}</td>\n      </tr>\n    )}\n}\n\nArrivalDetail.propTypes = {\n  arrival: PropTypes.object.isRequired,\n  now: PropTypes.number.isRequired,\n}\n","import React from 'react';\nimport ArrivalDetail from './ArrivalDetail';\nimport PropTypes from 'prop-types';\n\nexport default class ArrivalDetailList extends React.Component {\n  render() {\n    return (\n      <table\n        className={'arrivals'}\n        cellSpacing={0}>\n        <tbody>\n          { this.props.arrivalsForBusRoutes.map((arrival, i) => (\n            <ArrivalDetail\n              arrival={arrival}\n              now={this.props.now}\n              key={`arrival-detail-${i}`}\n            >\n            </ArrivalDetail>\n            ))\n          }\n        </tbody>\n      </table>\n    )}\n}\n\nArrivalDetailList.propTypes = {\n  arrivalsForBusRoutes: PropTypes.arrayOf(PropTypes.object).isRequired,\n  now: PropTypes.number.isRequired,\n}\n","import React from 'react';\nimport ArrivalDetailList from './ArrivalDetailList';\nimport PropTypes from 'prop-types';\n\nexport default class ArrivalCard extends React.Component {\n  state = {\n    arrivalsForStop: []\n  }\n\n  componentDidMount = () => {\n    this.arrivalSubscription = setInterval(this.fetchArrivalsForStop.bind(this), 60000);\n    this.fetchArrivalsForStop();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.arrivalSubscription);\n  }\n\n  fetchArrivalsForStop = function () {\n    const { stopId } = this.props;\n\n    fetch(`/api/v1/stops/${stopId}/arrivals`)\n      .then(res => res.json())\n      .then((response) => { this.setArrivalsForStop(response.data) })\n      .catch((error) => { console.log(\"Error fetching arrival for stop\", error); })\n  }\n\n  setArrivalsForStop = (data) => {\n    this.setState({\n      arrivalsForStop: data\n    });\n  }\n\n  stopLabel = () => {\n    const { references } = this.state.arrivalsForStop\n    if (!references) {\n      return `retrieving information for stop ${this.props.stopId}...`\n    }\n    const { stops } = references\n    const stopData = stops.find(stop => stop.id === this.props.stopId);\n    return `${stopData.name} - ${stopData.direction}`;\n  }\n\n  busRouteIds = () => {\n    const busRouteIds = this.props.busRouteIds.map(busRouteId => ( busRouteId.data().busRouteId))\n    return busRouteIds\n  }\n\n  arrivalsForBusRoutes = () => {\n    const { entry } = this.state.arrivalsForStop\n    if (!entry) {\n      return []\n    }\n    const { arrivalsAndDepartures } = entry\n    const busRouteIds = this.busRouteIds();\n    const arrivals = arrivalsAndDepartures.filter(arrival => busRouteIds.includes(arrival.routeId))\n    return arrivals\n  }\n\n  render() {\n    const stopLabel = this.stopLabel();\n    const arrivalsForBusRoutes = this.arrivalsForBusRoutes();\n    const now = Date.now();\n\n    return (\n      <div className={'arrival-card'}>\n        <h2>{stopLabel}</h2>\n        { arrivalsForBusRoutes && arrivalsForBusRoutes.length > 0\n          ? <ArrivalDetailList\n              arrivalsForBusRoutes={arrivalsForBusRoutes}\n              now={now}\n            >\n            </ArrivalDetailList>\n          : <p>no arrival details found</p>\n        }\n      </div>\n    )\n  }\n}\n\nArrivalCard.propTypes = {\n  stopId: PropTypes.string.isRequired,\n  busRouteIds: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n","import React from 'react';\nimport db from '../db';\nimport firebase from 'firebase';\nimport _ from 'lodash';\nimport ArrivalCard from './ArrivalCard';\nimport PropTypes from 'prop-types';\n\nexport default class Arrivals extends React.PureComponent {\n  state = {\n    stops: []\n  }\n\n  componentDidMount() {\n    this.getStops();\n  }\n\n  componentDidUpdate = (prevProps, prevState) => {\n    if (prevProps.selectedGroupId !== this.props.selectedGroupId) {\n      this.getStops();\n    }\n  }\n\n  getStops = () => {\n    const uid = firebase.auth().currentUser.uid;\n    db\n      .collection('users')\n      .doc(uid)\n      .collection('groups')\n      .doc(this.props.selectedGroupId)\n      .collection('stops')\n      .get()\n      .then(doc => {\n        this.setState({ stops: doc.docs})\n      })\n  }\n\n  busesByStop = () => {\n    return _.groupBy(this.state.stops, (stop) => ( stop.data().stopId ))\n  }\n\n  render() {\n    const busesByStop = this.busesByStop();\n    return (\n      <div className=\"arrivals\">\n        { Object.keys(busesByStop).map((stopId, i) => (\n          <ArrivalCard\n            key={`${stopId}-${i}`}\n            stopId={stopId}\n            busRouteIds={busesByStop[stopId]}\n          >\n          </ArrivalCard>\n        ))}\n      </div>\n    )\n  }\n}\n\nArrivals.propTypes = {\n  selectedGroupId: PropTypes.string.isRequired,\n}\n","import React from 'react';\nimport AddBus from './AddBus';\nimport Arrivals from './Arrivals';\nimport PropTypes from 'prop-types';\n\nexport default class Dashboard extends React.Component {\n  render() {\n    return (\n      <div>\n        { this.props.admin\n          ? <AddBus></AddBus>\n          : null\n        }\n        { this.props.selectedGroupId !== ''\n          ? <Arrivals\n              selectedGroupId={this.props.selectedGroupId}\n            >\n            </Arrivals>\n          : null\n        }\n      </div>\n    )\n  }\n}\n\nDashboard.propTypes = {\n  admin: PropTypes.bool.isRequired,\n  selectedGroupId: PropTypes.string.isRequired,\n}\n","import React from 'react';\nimport firebase from 'firebase';\nimport PropTypes from 'prop-types';\n\nexport default class DisplayUser extends React.Component {\n  signOut = (e) => {\n    e.preventDefault();\n    this.props.signOut();\n  }\n\n  render() {\n    const { displayName, photoURL } = firebase.auth().currentUser;\n    return (\n      <div className='display-user'>\n        <img alt=\"gravatar\" src={photoURL}></img>\n        <span className={'user-name'}>{displayName}</span>\n        <span className=\"clickable\" onClick={this.signOut}>\n          Sign Out\n        </span>\n      </div>\n    )\n  }\n}\n\nDisplayUser.propTypes = {\n  isSignedIn: PropTypes.bool.isRequired,\n  signOut: PropTypes.func.isRequired,\n}\n","import React from 'react';\nimport DisplayUser from './DisplayUser';\nimport PropTypes from 'prop-types';\n\nexport default class Header extends React.Component {\n  state = {\n    groups: []\n  }\n\n  render() {\n    return (\n      <div className={\"header\"}>\n        <div className={\"title\"}>Bus Arrivals</div>\n        <div className={'banner'}>\n          BLACK LIVES MATTER\n        </div>\n        { this.props.isSignedIn\n          ? <DisplayUser\n              isSignedIn={this.props.isSignedIn}\n              signOut={this.props.signOut} />\n          : <div\n              className={'display-user'}\n            >\n              signed out\n            </div>\n        }\n      </div>\n    )\n  }\n}\n\nHeader.propTypes = {\n  isSignedIn: PropTypes.bool.isRequired,\n  signOut: PropTypes.func.isRequired,\n}\n","import React from 'react';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from 'firebase';\nimport Navigation from './Navigation';\nimport Dashboard from './Dashboard';\nimport Header from './Header';\n\nexport default class Home extends React.Component {\n  state = {\n    isSignedIn: false,\n    selectedGroupId: '',\n    admin: false\n  }\n\n  uiConfig = {\n    signInFlow: 'popup',\n    signInOptions: [\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID\n    ],\n  }\n\n  componentDidMount() {\n      this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(\n        user => {\n          this.setState({ isSignedIn: !!user });\n        }\n      );\n    }\n\n    componentWillUnmount() {\n      if (this.unregisterAuthObserver) {\n        this.unregisterAuthObserver();\n      }\n    }\n\n  signOut = () => {\n    firebase.auth().signOut();\n  }\n\n  handleGroupClick = (tabId) => {\n    if (tabId === 'admin') {\n      this.setState({\n        admin: true,\n        selectedGroupId: ''\n      })\n    } else {\n      this.setState({\n        admin: false,\n        selectedGroupId: tabId\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header\n          isSignedIn={this.state.isSignedIn}\n          signOut={this.signOut}\n        >\n        </Header>\n        <Navigation\n          isSignedIn={this.state.isSignedIn}\n          signOut={this.signOut}\n          handleGroupClick={this.handleGroupClick}\n          admin={this.state.admin}\n          selectedGroupId={this.state.selectedGroupId}>\n        </Navigation>\n        { this.state.isSignedIn\n          ? <Dashboard\n              admin={this.state.admin}\n              selectedGroupId={this.state.selectedGroupId}\n            >\n            </Dashboard>\n          : <StyledFirebaseAuth\n              uiConfig={this.uiConfig}\n              firebaseAuth={firebase.auth()}\n            >\n            </StyledFirebaseAuth>\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport Home from './components/Home';\n\nimport './styles/App.css';\nimport './styles/dashboard.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './setupFirebase';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}